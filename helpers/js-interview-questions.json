[
  {
    "question": "Яка різниця між var, let і const в JavaScript?",
    "answers": [
      "var має функціональну область видимості, а let і const - блочну; let і const не піднімаються (hoisted) з ініціалізацією як var; const не можна перевизначити",
      "var і let мають однакову область видимості, const відрізняється тим, що змінну не можна змінити",
      "var піднімається (hoisted), let і const ні; області видимості у всіх однакові",
      "const і let мають функціональну область видимості, var - глобальну"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Що станеться при виконанні цього коду?\n```javascript\nconsole.log(x);\nvar x = 5;\n```",
    "answers": [
      "Буде виведено 5",
      "Буде виведено undefined",
      "Буде помилка ReferenceError, оскільки x не визначено",
      "Буде виведено null"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що станеться при виконанні цього коду?\n```javascript\nconsole.log(y);\nlet y = 5;\n```",
    "answers": [
      "Буде виведено undefined",
      "Буде виведено 5",
      "Буде помилка ReferenceError: y is not defined",
      "Буде помилка ReferenceError: Cannot access 'y' before initialization"
    ],
    "correctAnswerId": 3
  , "topic":"js-topic" },
  {
    "question": "Що таке hoisting (підняття) в JavaScript?",
    "answers": [
      "Механізм, при якому оголошення змінних і функцій переміщуються в початок їх області видимості перед виконанням коду",
      "Це спосіб оптимізації коду в браузері",
      "Механізм, який дозволяє функціям викликати самих себе",
      "Це технологія підняття продуктивності JavaScript в сучасних браузерах"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Який результат виконання?\n```javascript\nconst obj = { a: 1 };\nconst copy = obj;\ncopy.a = 2;\nconsole.log(obj.a);\n```",
    "answers": [
      "1",
      "2",
      "undefined",
      "Помилка TypeError"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як правильно створити глибоку копію об'єкта в сучасному JavaScript?",
    "answers": [
      "const copy = Object.create(obj);",
      "const copy = Object.assign({ }, obj);",
      "const copy = structuredClone(obj);",
      "const copy = JSON.parse(JSON.stringify(obj));"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Що таке стрілочні функції (arrow functions) і як вони відрізняються від звичайних функцій?",
    "answers": [
      "Стрілочні функції мають той самий this, що й звичайні функції",
      "Стрілочні функції не мають власного this, arguments, super і не можуть використовуватися як конструктори",
      "Стрілочні функції завжди анонімні, але в усьому іншому ідентичні звичайним функціям",
      "Єдина відмінність стрілочних функцій від звичайних - синтаксис запису"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює метод .reduce() для масивів?",
    "answers": [
      "Зменшує розмір масиву шляхом видалення непотрібних елементів",
      "Фільтрує масив, залишаючи тільки унікальні елементи",
      "Виконує функцію-редуктор для кожного елемента масиву, результатом є одне значення",
      "Перетворює всі елементи масиву відповідно до заданої функції"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Навіщо використовують IIFE (Immediately Invoked Function Expression)?",
    "answers": [
      "Для створення замикань та уникнення забруднення глобальної області видимості",
      "Для підвищення швидкості виконання функцій",
      "Це застаріла практика, яка не використовується в сучасному JavaScript",
      "Для зменшення розміру коду при мініфікації"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Яка різниця між методами .call(), .apply() та .bind()?",
    "answers": [
      ".call() і .apply() відразу викликають функцію з прив'язаним контекстом, .bind() повертає нову функцію з прив'язаним контекстом",
      "Немає різниці, це лише синтаксичні аналоги",
      ".bind() і .call() працюють однаково, а .apply() підтримує передачу аргументів як масиву",
      ".bind() використовується для асинхронних функцій, .call() і .apply() - для синхронних"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Що таке Event Bubbling та Event Capturing?",
    "answers": [
      "Два режими роботи браузера при обробці CSS-анімацій",
      "Два різних способи поширення подій в DOM: спливання (від дочірнього до батьківського) та захоплення (від батьківського до дочірнього)",
      "Технології обробки помилок у JavaScript",
      "Різні підходи до вимірювання продуктивності в JS"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Які стани може мати Promise в JavaScript?",
    "answers": [
      "active, passive, completed",
      "pending, rejected, resolved",
      "pending, fulfilled, rejected",
      "start, processing, end, error"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Що таке Event Loop в JavaScript?",
    "answers": [
      "Бібліотека для обробки асинхронних подій",
      "Механізм, що дозволяє JavaScript виконувати неблокуючі операції через цикл обробки завдань з черги",
      "Алгоритм оптимізації обробки подій миші та клавіатури",
      "Спеціальний режим виконання коду в NodeJS"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Яка різниця між мікрозавданнями та макрозавданнями в Event Loop?",
    "answers": [
      "Мікрозавдання виконуються швидше, ніж макрозавдання",
      "Мікрозавдання мають нижчий пріоритет, ніж макрозавдання",
      "Мікрозавдання виконуються після кожної макрозадачі перед рендерингом, а макрозавдання виконуються по одній за цикл",
      "Це одне й те саме, просто різні терміни в різних браузерах"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Як примусово викликати перерендеринг React компонента?",
    "answers": [
      "Використати метод rerender()",
      "Викликати this.forceUpdate()",
      "Змінити ключ (key) компонента",
      "Використати React.refresh()"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Чому важливо вказувати атрибут key при створенні списків елементів у React?",
    "answers": [
      "Без ключа React не зможе відобразити елементи",
      "Ключ дозволяє React ефективно оновлювати DOM, визначаючи, які елементи змінилися, додалися або видалилися",
      "Ключ потрібен тільки для відлагодження (debugging)",
      "Ключ необхідний лише при використанні функціональних компонентів"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює Virtual DOM у React?",
    "answers": [
      "Virtual DOM - це копія реального DOM, яка зберігається в пам'яті для порівняння змін перед оновленням реального DOM",
      "Virtual DOM - це технологія прискорення роботи JavaScript через WebAssembly",
      "Virtual DOM - це спеціальний режим роботи браузера для React-додатків",
      "Virtual DOM - це інструмент для розробки, який не впливає на продуктивність"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Яка структура cookie в браузері?",
    "answers": [
      "Cookies - це JSON-об'єкти, які зберігаються в браузері",
      "Cookies складаються з name, value, domain, path, expires/max-age, secure, HttpOnly та інших полів",
      "Cookies - це просто пари ключ-значення без додаткових атрибутів",
      "Cookies мають тільки ім'я, значення та термін дії"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Яка різниця між localStorage та sessionStorage?",
    "answers": [
      "localStorage зберігає дані безстроково, sessionStorage - тільки на час сесії; обидва прив'язані до джерела (origin)",
      "Різниці немає, це просто різні назви однієї технології",
      "localStorage працює тільки в Chrome, sessionStorage - у всіх браузерах",
      "localStorage має обмеження в 1МБ, sessionStorage - необмежений"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Що таке CORS і як він працює?",
    "answers": [
      "CORS - система кешування запитів у браузері",
      "CORS (Cross-Origin Resource Sharing) - механізм, що дозволяє або забороняє веб-програмам з одного домену звертатися до ресурсів іншого домену",
      "CORS - протокол шифрування даних при передачі між клієнтом і сервером",
      "CORS - технологія оптимізації роботи JavaScript в браузері"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює ключове слово this у JavaScript?",
    "answers": [
      "this завжди вказує на об'єкт, в якому визначений метод",
      "this завжди вказує на глобальний об'єкт (window у браузері)",
      "Значення this залежить від контексту виклику функції",
      "this - це посилання на попередню функцію в стеку викликів"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Як правильно скопіювати масив у JavaScript?",
    "answers": [
      "const newArray = originalArray;",
      "const newArray = [...originalArray];",
      "const newArray = originalArray.copy();",
      "const newArray = Array.from(originalArray);"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Який результат виконання?\n```javascript\nlet a = [1, 2, 3];\nlet b = [1, 2, 3];\nconsole.log(a == b);\n```",
    "answers": [
      "true",
      "false",
      "undefined",
      "TypeError"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Promise.allSettled() і коли він корисний?",
    "answers": [
      "Він повертає проміс, який виконується, коли всі проміси виконані успішно",
      "Він повертає проміс, який виконується, коли хоча б один проміс виконаний успішно",
      "Він повертає проміс, який виконується, коли всі проміси завершені (виконані або відхилені)",
      "Він працює як Promise.all(), але має кращу продуктивність"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "У чому різниця між методами forEach() і map() для масивів?",
    "answers": [
      "forEach() повертає новий масив, map() не повертає нічого",
      "map() повертає новий масив, forEach() не повертає нічого",
      "forEach() може змінювати оригінальний масив, map() - ні",
      "Різниці немає, це просто різні назви одного методу"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке замикання (closure) в JavaScript?",
    "answers": [
      "Це спосіб запечатати змінні в області видимості функції, роблячи їх недоступними ззовні",
      "Це функція, яка має доступ до змінних з її зовнішньої (лексичної) області видимості",
      "Це механізм захисту змінних від модифікації",
      "Це спосіб організації коду з використанням класів"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке контекст виконання (execution context) в JavaScript?",
    "answers": [
      "Це середовище, в якому оцінюється та виконується код JavaScript",
      "Це область пам'яті, де зберігаються змінні",
      "Це режим роботи движка JavaScript",
      "Це налаштування браузера для виконання скриптів"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Що таке Web Workers і для чого вони використовуються?",
    "answers": [
      "Це замінники ServiceWorker у старих браузерах",
      "Це спосіб запуску JavaScript у фоновому потоці, не блокуючи основний потік виконання",
      "Це бібліотека для роботи з DOM у фоновому режимі",
      "Це спеціальні функції для багатопоточних обчислень у JavaScript"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Який результат виконання?\n```javascript\nconsole.log(typeof null);\n```",
    "answers": [
      "null",
      "undefined",
      "object",
      "NaN"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Що станеться при виконанні?\n```javascript\nlet obj = { a: 1 };\nlet obj2 = { a: 1 };\nconsole.log(obj === obj2);\n```",
    "answers": [
      "true",
      "false",
      "TypeError",
      "Залежить від браузера"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як правильно перевірити, чи є значення масивом в JavaScript?",
    "answers": [
      "value instanceof Array",
      "typeof value === 'array'",
      "Array.isArray(value)",
      "value.constructor === Array"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Яка різниця між null і undefined в JavaScript?",
    "answers": [
      "Це одне й те саме значення, просто різні назви",
      "null - це відсутність значення, undefined - змінна оголошена, але не ініціалізована",
      "null використовується тільки в об'єктах, undefined - у примітивах",
      "undefined - це відсутність значення, null - значення, яке представляє «нічого»"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Symbol в JavaScript?",
    "answers": [
      "Це аналог enum з інших мов програмування",
      "Це примітивний тип даних, який представляє унікальний ідентифікатор",
      "Це спеціальний тип об'єктів для математичних операцій",
      "Це інструмент для створення приватних методів у класах"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як в JavaScript перевірити, чи є об'єкт екземпляром певного класу?",
    "answers": [
      "За допомогою typeof obj === 'ClassName'",
      "За допомогою obj.constructor === ClassName",
      "За допомогою obj instanceof ClassName",
      "За допомогою Object.isInstance(obj, ClassName)"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Що таке ітератори та генератори в JavaScript?",
    "answers": [
      "Ітератори - це масиви, генератори - це функції, що створюють масиви",
      "Ітератори - об'єкти з методом next(), генератори - функції з ключовим словом function* для створення ітераторів",
      "Ітератори використовуються для синхронних операцій, генератори - для асинхронних",
      "Це просто різні назви одного й того ж поняття"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Top-Level Await в JavaScript?",
    "answers": [
      "Можливість використовувати await поза async-функціями в модулях",
      "Спеціальна конструкція для очікування завантаження сторінки",
      "Новий синтаксис для роботи з Promise",
      "Функціональність для паузи виконання всього JavaScript на сторінці"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Як працює Optional Chaining (?.) в JavaScript?",
    "answers": [
      "Створює умовне розгалуження в коді",
      "Повертає undefined, якщо проміжне значення - null або undefined, замість помилки",
      "Автоматично ініціалізує null-властивості об'єкта",
      "Перевіряє, чи існує метод в об'єкті перед його викликом"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Nullish Coalescing operator (??) в JavaScript?",
    "answers": [
      "Повертає праву частину, якщо ліва - null або undefined, інакше - ліву",
      "Перевіряє, чи є значення null, і перетворює його на undefined",
      "Об'єднує два null-значення в одне ненульове",
      "Це аналог логічного АБО (||) з меншим пріоритетом"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Як використовується метод Object.freeze() в JavaScript?",
    "answers": [
      "Блокує змінну від зміни значення",
      "Запобігає додаванню, видаленню та зміні властивостей об'єкта",
      "Заморожує виконання коду на певний час",
      "Перетворює об'єкт на примітив"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "У чому різниця між JSON.stringify() і toString()?",
    "answers": [
      "JSON.stringify() перетворює об'єкт на рядок JSON, toString() повертає рядкове представлення об'єкта",
      "JSON.stringify() працює тільки з масивами, toString() - з усіма типами",
      "Різниці немає, це синоніми",
      "JSON.stringify() швидше, але підтримується не всіма браузерами"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Що робить метод Array.prototype.flat() в JavaScript?",
    "answers": [
      "Видаляє дублікати з масиву",
      "Сортує масив за зростанням",
      "Згладжує (розгортає) вкладені масиви до вказаної глибини",
      "Перетворює багатовимірний масив на одновимірний"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Як працює метод Object.assign() в JavaScript?",
    "answers": [
      "Створює глибоку копію об'єкта",
      "Копіює властивості з одного або кількох вихідних об'єктів у цільовий об'єкт",
      "Порівнює два об'єкти і повертає true, якщо вони ідентичні",
      "Призначає новий прототип об'єкту"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке метод fetch() і як він відрізняється від XMLHttpRequest?",
    "answers": [
      "fetch() - новіший, базується на Promise, має більш чистий API, відокремлює запит від відповіді",
      "fetch() працює тільки з JSON, XMLHttpRequest - з усіма типами даних",
      "fetch() не підтримує CORS, на відміну від XMLHttpRequest",
      "fetch() - це синонім axios, а XMLHttpRequest - старий стандарт"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Для чого використовується WeakMap в JavaScript?",
    "answers": [
      "Для створення карт з обмеженим часом життя",
      "Для збереження слабких посилань на об'єкти, дозволяючи їм бути зібраними збирачем сміття",
      "Для оптимізації продуктивності при роботі з великими об'єктами",
      "Це просто інша назва Map в деяких браузерах"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке HTTP-заголовок Content-Security-Policy?",
    "answers": [
      "Заголовок, що вказує, які типи контенту можуть завантажуватися на сторінку",
      "Заголовок, що контролює, які користувачі мають доступ до сторінки",
      "Заголовок, що шифрує вміст сторінки",
      "Заголовок, що дозволяє або забороняє кешування сторінки"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Яка різниця між методами som() і every() для масивів у JavaScript?",
    "answers": [
      "some() повертає true, якщо хоча б один елемент відповідає умові; every() - якщо всі елементи відповідають",
      "some() перевіряє наявність елемента в масиві; every() перевіряє, чи всі елементи однакові",
      "some() працює з числами, every() - з рядками",
      "Різниці немає, це просто різні назви одного методу"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Що таке властивість prototype у JavaScript?",
    "answers": [
      "Це об'єкт, що містить властивості та методи, які будуть доступні всім екземплярам створеним через конструктор",
      "Це ключове слово для створення нових об'єктів",
      "Це властивість, яка дозволяє створювати приватні методи",
      "Це аналог інтерфейсу з TypeScript"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Як працює оператор spread (...) в JavaScript?",
    "answers": [
      "Об'єднує кілька масивів в один",
      "Розгортає ітерабельний об'єкт у місцях, де очікується нуль або більше аргументів/елементів",
      "Створює новий масив з унікальними елементами",
      "Перетворює об'єкт на масив"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Proxy в JavaScript?",
    "answers": [
      "Це об'єкт, який перенаправляє HTTP-запити",
      "Це об'єкт, який можна використовувати для створення проксі-серверів",
      "Це об'єкт, який дозволяє перехоплювати і налаштовувати операції для іншого об'єкта",
      "Це спосіб захисту від CSRF-атак"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Як працює Event Delegation у JavaScript?",
    "answers": [
      "Це метод оптимізації обробки подій шляхом додавання одного обробника на батьківський елемент замість багатьох на дочірні",
      "Це технологія для передачі подій між різними фреймами на сторінці",
      "Це спосіб блокування обробки певних подій",
      "Це бібліотека для управління подіями в React"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "У чому різниця між `==` і `===` в JavaScript?",
    "answers": [
      "`==` порівнює значення з приведенням типів, `===` порівнює значення без приведення типів",
      "`==` швидше, ніж `===`, але менш точний",
      "`===` працює тільки з примітивами, `==` - з усіма типами даних",
      "Різниці немає, це просто різні записи одного оператора"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Яка різниця між функціями, оголошеними через function declaration і function expression?",
    "answers": [
      "Функції, оголошені через function declaration, піднімаються (hoisted) повністю, а function expression - ні",
      "Function declaration можна використовувати тільки як методи об'єктів",
      "Function expression більш продуктивні",
      "Різниці немає, це просто різні синтаксичні форми"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Для чого використовується метод Array.prototype.flatMap()?",
    "answers": [
      "Для видалення дублікатів у масиві",
      "Для об'єднання двох масивів",
      "Для поєднання map() і flat() в одній операції",
      "Для перетворення об'єкта на масив"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Що означає ключове слово async перед оголошенням функції?",
    "answers": [
      "Функція виконується в окремому потоці",
      "Функція завжди повертає Promise і дозволяє використовувати await всередині неї",
      "Функція виконується після завантаження всього скрипта",
      "Функція викликається автоматично при завантаженні сторінки"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює оператор await в JavaScript?",
    "answers": [
      "Зупиняє виконання всього JS-коду на сторінці до завершення операції",
      "Очікує на завершення промісу і повертає його результат, призупиняючи виконання async-функції",
      "Створює новий проміс",
      "Перетворює синхронну функцію на асинхронну"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Set в JavaScript?",
    "answers": [
      "Масив, який автоматично сортується",
      "Об'єкт, що дозволяє зберігати унікальні значення будь-якого типу",
      "Аналог Map, але без ключів",
      "Спеціальний тип даних для обробки великих обсягів інформації"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працюють веб-компоненти (Web Components) і які їх основні частини?",
    "answers": [
      "Це спеціальні класи для React",
      "Це технологія, що складається з Custom Elements, Shadow DOM і HTML Templates",
      "Це специфікація для створення PWA",
      "Це стандарт для роботи з WebAssembly"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке HTTP/3 і чим він відрізняється від HTTP/2?",
    "answers": [
      "HTTP/3 використовує протокол UDP замість TCP через QUIC, що покращує швидкість і стабільність з'єднання",
      "HTTP/3 - це просто оновлена версія HTTP/2 з кращою безпекою",
      "HTTP/3 підтримує тільки JSON, а HTTP/2 - всі типи даних",
      "HTTP/3 доступний тільки для власників спеціальних сертифікатів"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Як використовувати декоратори в JavaScript?",
    "answers": [
      "Декоратори застосовуються для сертифікації коду",
      "Декоратори - це спеціальний синтаксис (@decorator) для модифікації класів і їх елементів, що дозволяє додавати функціональність",
      "Декоратори - це надбудова поверх стилів CSS",
      "Декоратори доступні тільки в TypeScript, а не в JavaScript"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Private class fields (#) в JavaScript?",
    "answers": [
      "Приватні поля класу (#name) доступні тільки всередині класу, в якому вони оголошені",
      "Це просто спосіб іменування, не має особливого сенсу",
      "Це коментарі всередині класів",
      "Це поля, доступні тільки в режимі відлагодження"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Що таке temporal dead zone (TDZ) для змінних let і const?",
    "answers": [
      "Період, коли веб-програма не активна",
      "Область пам'яті, де зберігаються неактивні змінні",
      "Період між створенням змінної і її ініціалізацією, коли до неї неможливо отримати доступ",
      "Спеціальний режим для оптимізації пам'яті"
    ],
    "correctAnswerId": 2
  , "topic":"js-topic" },
  {
    "question": "Поясніть використання і корисність TypeScript в JavaScript-проєктах",
    "answers": [
      "TypeScript просто ускладнює розробку без реальних переваг",
      "TypeScript надає статичну типізацію, інтерфейси, дженерики і інші функції, які покращують якість коду та зменшують кількість помилок під час виконання",
      "TypeScript корисний тільки для старих браузерів",
      "TypeScript - це просто альтернативна назва JavaScript"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке WebAssembly (WASM) і коли його варто використовувати?",
    "answers": [
      "Це формат коду низького рівня для виконання в браузерах, корисний для завдань з інтенсивними обчисленнями",
      "Це новий спосіб написання JavaScript",
      "Це спеціальний режим JavaScript для роботи з 3D-графікою",
      "Це аналог Electron для мобільних пристроїв"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Як використовувати Record and Tuple в сучасному JavaScript?",
    "answers": [
      "Це нові примітивні типи даних - # для запису (record) і # для кортежу (tuple), що надають незмінні структури даних",
      "Це спеціальні методи для роботи з базами даних",
      "Це частина стандарту ES5, що використовується для зберігання даних",
      "Це концепції з TypeScript, недоступні в чистому JavaScript"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Що таке Temporal API і які проблеми він вирішує?",
    "answers": [
      "Це API для роботи з тимчасовими файлами",
      "Це більш потужна і зручна заміна Date API для роботи з датами, часом, часовими поясами, календарями тощо",
      "Це API для вимірювання продуктивності коду",
      "Це спосіб оптимізації завантаження JavaScript"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює Pattern Matching в JavaScript?",
    "answers": [
      "Це спосіб перевірки властивостей об'єктів через регулярні вирази",
      "Це сучасний синтаксис для порівняння значень і структур даних, подібний до switch, але потужніший",
      "Це технологія для пошуку подібних фрагментів в коді",
      "Це метод для порівняння DOM-елементів"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Які особливості використання CSS у JavaScript за допомогою CSS-in-JS бібліотек?",
    "answers": [
      "CSS-in-JS дозволяє писати стилі прямо в JavaScript, забезпечуючи інкапсуляцію, динамічні стилі та усунення проблем з глобальними стилями",
      "CSS-in-JS - це просто інша назва для інлайнових стилів",
      "CSS-in-JS використовується тільки з фреймворком Vue.js",
      "CSS-in-JS значно сповільнює додаток і не рекомендується до використання"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Як використовувати Import Maps в сучасному JavaScript?",
    "answers": [
      "Import Maps - це спеціальні карти для навігації на сайті",
      "Import Maps дозволяють контролювати шляхи імпорту в JavaScript, спрощуючи імпорти та полегшуючи використання модулів безпосередньо в браузері",
      "Import Maps використовуються тільки для серверного JavaScript",
      "Import Maps - це інструмент для оптимізації завантаження зображень"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Server Components в React і чим вони відрізняються від Client Components?",
    "answers": [
      "Server Components виконуються на сервері і не потребують JavaScript у браузері, Client Components виконуються в браузері",
      "Server Components - це просто інша назва для SSR",
      "Server Components доступні тільки в Angular",
      "Це просто маркетинговий термін, насправді різниці немає"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Як працюють React Signal і Signal-based взаємодії в сучасному JavaScript?",
    "answers": [
      "Це аналог WebSocket для React",
      "Це примітиви реактивності, що дозволяють точно відстежувати та оновлювати залежності, покращуючи продуктивність React-додатків",
      "Це альтернатива Redux для управління станом",
      "Це спеціальні сигнали для обробки помилок"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Service Workers і які можливості вони надають?",
    "answers": [
      "Це спеціальні потоки для виконання важких обчислень",
      "Це скрипти, що виконуються у фоні окремо від веб-сторінки, дозволяючи реалізувати офлайн-функціональність, кешування, фонову синхронізацію і push-сповіщення",
      "Це серверні робочі процеси для Node.js",
      "Це аналоги Web Workers для IE11"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Поясніть концепцію Server-Sent Events (SSE) і коли вона корисна?",
    "answers": [
      "SSE - це технологія для відправки даних з клієнта на сервер",
      "SSE дозволяє серверу відправляти оновлення клієнту через одне HTTP-з'єднання в реальному часі, корисна для стрічок новин, сповіщень",
      "SSE - це альтернатива REST API",
      "SSE використовується тільки з GraphQL"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Internationalization API (Intl) і як його використовувати?",
    "answers": [
      "Intl - це просто колекція перекладів для додатків",
      "Intl API надає можливості для форматування дат, чисел, порівняння рядків з урахуванням локалі користувача",
      "Intl - це бібліотека для роботи з геолокацією",
      "Intl API доступний тільки в Node.js"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як використовувати Observables та RxJS в сучасному JavaScript?",
    "answers": [
      "Observables - це патерн і бібліотека (RxJS) для роботи з асинхронними потоками даних, реактивного програмування",
      "Observables використовуються тільки для відстеження помилок",
      "RxJS - це бібліотека для роботи з DOM",
      "Observables - це застаріла технологія, яку замінили Promise"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Що таке Logical Assignment Operators (&&=, ||=, ??=) і як вони працюють?",
    "answers": [
      "Це спеціальні оператори для масивів",
      "Це комбіновані оператори, що виконують логічну операцію і присвоєння в один крок",
      "Це оператори тільки для числових значень",
      "Це синоніми для +=, -= і *="
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює React Fiber і які проблеми він вирішує?",
    "answers": [
      "React Fiber - це бібліотека для роботи з анімаціями",
      "Fiber - це реалізація алгоритму узгодження (reconciliation) в React, що дозволяє розбивати рендеринг на частини, пріоритизувати оновлення і покращувати продуктивність",
      "React Fiber - це спеціальний режим для SSR",
      "Fiber - це техніка оптимізації React для мобільних пристроїв"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке State Machines в JavaScript і коли їх варто використовувати?",
    "answers": [
      "State Machines - це бібліотека для роботи зі станами в React",
      "State Machines - це математична модель для управління складними станами програми, що чітко визначає можливі стани і переходи між ними",
      "State Machines використовуються тільки для ігрової розробки",
      "State Machines - це техніка оптимізації JavaScript-коду"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Micro-Frontends і які переваги вони дають?",
    "answers": [
      "Micro-Frontends - це мініатюрні інтерфейси для мобільних пристроїв",
      "Це архітектурний підхід, при якому фронтенд-додаток розбивається на незалежні частини, що розробляються і розгортаються окремо",
      "Micro-Frontends - це спеціальні компоненти для React Native",
      "Це техніка оптимізації часу завантаження веб-сторінок"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює Native File System API і які можливості він надає?",
    "answers": [
      "Це API для роботи з нативними мобільними додатками",
      "Це API, що дає веб-додаткам доступ до файлової системи користувача для читання і запису файлів",
      "Це альтернатива IndexedDB для зберігання даних",
      "Це інтерфейс для роботи з віртуальною файловою системою в браузері"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Houdini CSS API і як воно взаємодіє з JavaScript?",
    "answers": [
      "Це бібліотека для анімацій у React",
      "Це набір низькорівневих API, що дають доступ до CSS engine браузера, дозволяючи створювати нові CSS функції без очікування їх реалізації в браузерах",
      "Це спеціальна техніка для оптимізації CSS",
      "Це фреймворк для створення CSS-в-JS стилів"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює GraphQL і чим він відрізняється від REST?",
    "answers": [
      "GraphQL - це спеціальний формат для зберігання даних",
      "GraphQL - це мова запитів для API, що дозволяє клієнтам запитувати тільки потрібні дані, зменшуючи over-fetching і under-fetching, характерні для REST",
      "GraphQL - це бібліотека для візуалізації даних",
      "GraphQL можна використовувати тільки з MongoDB"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке ESM (ECMAScript Modules) і чим вони відрізняються від CommonJS?",
    "answers": [
      "ESM - це офіційна система модулів JavaScript, що використовує import/export і підтримує статичний аналіз; CommonJS використовує require/module.exports",
      "ESM - це просто інша назва CommonJS",
      "ESM працює тільки в браузері, CommonJS - тільки в Node.js",
      "ESM - це застаріла технологія, яку витісняє CommonJS"
    ],
    "correctAnswerId": 0
  , "topic":"js-topic" },
  {
    "question": "Як використовується оператор ?. (optional chaining) з масивами і функціями?",
    "answers": [
      "Оператор ?. можна використовувати тільки з об'єктами",
      "Оператор ?. працює також із масивами (arr?.[0]) і функціями (func?.())",
      "Для масивів використовується ?[], для функцій ?()",
      "Оператор ?. можна використовувати тільки у TypeScript"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке TC39 і яка його роль в розвитку JavaScript?",
    "answers": [
      "TC39 - це бібліотека для тестування JavaScript-коду",
      "TC39 (Technical Committee 39) - це комітет, що розробляє специфікацію ECMAScript (JavaScript), оцінює пропозиції та переводить їх через процес від Stage 0 до Stage 4",
      "TC39 - це інструмент для компіляції TypeScript в JavaScript",
      "TC39 - це 39-а версія компілятора TypeScript"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке JAMstack і які його основні принципи?",
    "answers": [
      "JAMstack - це спеціальний стек технологій для Java-додатків",
      "JAMstack (JavaScript, APIs, Markup) - це архітектурний підхід, що базується на клієнтському JavaScript, API і попередньо побудованому маркапі",
      "JAMstack - це фреймворк для створення PWA",
      "JAMstack - це набір інструментів для тестування"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Web Bluetooth API і як його використовувати?",
    "answers": [
      "Це API для створення Bluetooth-пристроїв",
      "Це API, що дозволяє веб-сторінкам взаємодіяти з пристроями Bluetooth Low Energy",
      "Це спеціальний протокол для комунікації між веб-сайтами",
      "Це бібліотека для емуляції Bluetooth на веб-сторінках"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює Async Iteration і for-await-of в JavaScript?",
    "answers": [
      "Це способи для роботи з Promise.all()",
      "for-await-of дозволяє перебирати асинхронні ітератори, очікуючи вирішення кожного проміса перед переходом до наступного елемента",
      "Async Iteration доступна тільки в TypeScript",
      "for-await-of - це застаріла технологія, яку замінили Promises"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Workbox і як його використовувати для PWA?",
    "answers": [
      "Workbox - це набір бібліотек для створення робочих місць",
      "Workbox - це набір бібліотек і інструментів для спрощення роботи з Service Workers, кешування і створення PWA",
      "Workbox - це фреймворк для створення мобільних додатків",
      "Workbox - це інструмент для автоматизації тестування"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює Permissions API і для чого він використовується?",
    "answers": [
      "Це API для налаштування прав доступу до файлів",
      "Permissions API дозволяє веб-додаткам перевіряти, запитувати і відстежувати статус дозволів для різних функцій браузера (геолокація, сповіщення, камера тощо)",
      "Це спеціальний API для адміністраторів сайтів",
      "Це технологія для авторизації користувачів"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке React Suspense і коли його варто використовувати?",
    "answers": [
      "React Suspense - це інструмент для роботи з анімаціями",
      "React Suspense дозволяє призупиняти рендеринг компонентів, поки дані завантажуються, показуючи запасний UI (fallback)",
      "React Suspense - це альтернатива Redux",
      "React Suspense використовується тільки для серверного рендерингу"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як використовувати Geolocation API в сучасному JavaScript?",
    "answers": [
      "Geolocation API доступний тільки в нативних додатках",
      "Geolocation API дозволяє отримати географічне положення користувача через navigator.geolocation.getCurrentPosition() або watchPosition()",
      "Geolocation API працює тільки з Google Maps",
      "Geolocation API був визнаний застарілим у 2023 році"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як використовувати SharedArrayBuffer і Atomics для багатопоточності в JavaScript?",
    "answers": [
      "Ці технології недоступні в JavaScript",
      "SharedArrayBuffer дозволяє створювати буфери, доступні для кількох Web Workers, а Atomics надає атомарні операції для безпечної конкуренції",
      "Це технології для роботи з базами даних",
      "Ці функції доступні тільки в Node.js"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як працює Intersection Observer API і для чого він використовується?",
    "answers": [
      "Це API для визначення перетинів геометричних фігур",
      "Intersection Observer API дозволяє асинхронно відстежувати перетин елемента з viewport або іншим елементом, корисний для ліниве завантаження, ефектів при прокрутці",
      "Це технологія для виявлення колізій в іграх",
      "Це інструмент для аналізу трафіку на сайті"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Resize Observer API і коли його варто використовувати?",
    "answers": [
      "Це API для зміни розміру зображень",
      "Resize Observer API дозволяє відстежувати зміни розмірів елементів, корисний для адаптивних компонентів і кастомних лейаутів",
      "Це спеціальний режим для мобільних пристроїв",
      "Це технологія для оптимізації продуктивності сайтів"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Поясніть концепцію Isomorphic/Universal JavaScript і які переваги вона надає",
    "answers": [
      "Це JavaScript, який працює тільки в новітніх браузерах",
      "Це підхід, при якому один і той же JavaScript-код виконується як на сервері, так і на клієнті, покращуючи продуктивність і SEO",
      "Це спеціальна версія JavaScript для крос-платформної розробки",
      "Це методологія для написання масштабованого коду"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке тип даних BigInt і коли його варто використовувати?",
    "answers": [
      "BigInt - це тип даних для вбудованих об'єктів",
      "BigInt - це примітивний тип даних для представлення цілих чисел, більших за 2^53-1, що є обмеженням для Number",
      "BigInt використовується тільки в машинному навчанні",
      "BigInt - це просто синонім для Number в нових браузерах"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як використовувати Web Speech API для розпізнавання і синтезу мовлення?",
    "answers": [
      "Web Speech API доступний тільки в нативних додатках",
      "Web Speech API дозволяє реалізувати розпізнавання мовлення (SpeechRecognition) і синтез мовлення (SpeechSynthesis) у веб-додатках",
      "Ця технологія працює тільки з Chrome",
      "Web Speech API був визнаний застарілим у 2024 році"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке Content Security Policy (CSP) і як вона захищає веб-додатки?",
    "answers": [
      "CSP - це бібліотека для шифрування даних",
      "CSP - це механізм безпеки, що дозволяє визначити, які ресурси можуть завантажуватися, захищаючи від XSS та інших атак",
      "CSP використовується тільки для захисту баз даних",
      "CSP - це технологія для захисту від DDoS-атак"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Як використовувати Payment Request API для обробки платежів у веб-додатках?",
    "answers": [
      "Payment Request API працює тільки з PayPal",
      "Payment Request API надає стандартний інтерфейс для обробки платежів, спрощуючи процес оформлення замовлення",
      "Ця технологія доступна тільки для мобільних додатків",
      "Payment Request API було визнано небезпечним і застарілим"
    ],
    "correctAnswerId": 1
  , "topic":"js-topic" },
  {
    "question": "Що таке debounce і throttle в JavaScript?",
    "answers": [
      "Техніки оптимізації частоти виклику функцій.",
      "Методи виклику подій.",
      "Способи визначення змінних.",
      "Функції для виклику API."
    ],
    "correctAnswerId": 0
  }
]